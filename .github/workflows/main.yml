on:
  push:
      branches:
          - main
  pull_request:
      branches:
          - main

jobs:
  # Build binaries on Ubuntu
  build-binaries-linux:
    runs-on: ubuntu-latest
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x

      - name: Restore Deno Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}

      - name: Install dependencies
        run: rm -rf node_modules && pnpm install

      - name: Build types
        run: pnpm run build-types

      - name: Build @taqueria/protocol
        run: pnpm --filter @taqueria/protocol run build

      - name: Build binary
        run: pnpm run build:binary
          
      - name: Save Deno Cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taq-ubuntu-latest
          path: taq

      - name: Create archive of work
        run: |
          set +e
          tar -czpf work.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Store work
        uses: actions/upload-artifact@v4
        with:
          name: work-stage1-ubuntu-latest
          path: work.tar.gz
          retention-days: 1

  # Build binaries on macOS
  build-binaries-macos:
    runs-on: macos-latest
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x

      - name: Restore Deno Cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}

      - name: Install dependencies
        run: rm -rf node_modules && pnpm install

      - name: Build types
        run: pnpm run build-types

      - name: Build @taqueria/protocol
        run: pnpm --filter @taqueria/protocol run build

      - name: Build binary
        run: pnpm run build:binary
          
      - name: Save Deno Cache
        uses: actions/cache/save@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taq-macos-latest
          path: taq

  # Build packages
  build-packages:
    needs: build-binaries-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v4
        with:
          version: 9

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v1.x

      - name: Download work archive
        uses: actions/download-artifact@v4
        with:
          name: work-stage1-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work.tar.gz

      - name: Build packages
        id: build_packages
        continue-on-error: true  # This allows subsequent steps to run even if this step fails
        run: pnpm run build:packages

      - name: Debug TypeScript configuration
        if: always()  # This ensures the step runs even if previous steps fail
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents of taqueria-lib-ligo:"
          ls -R taqueria-lib-ligo
          echo "TypeScript version:"
          npx tsc --version
          echo "tsconfig.json contents:"
          cat taqueria-lib-ligo/tsconfig.json
          echo "Trying to compile taqueria-lib-ligo:"
          npx tsc -p taqueria-lib-ligo/tsconfig.json --listFiles

      - name: Check build status
        if: steps.build_packages.outcome != 'success'
        run: exit 1

      - name: Get VSIX
        id: vsix
        run: echo "artifact=$(ls taqueria-vscode-extension/*.vsix)" >> "$GITHUB_OUTPUT"

      - name: Upload VSCode Extension
        uses: actions/upload-artifact@v4
        with:
          name: taqueria.vsix
          path: ${{ steps.vsix.outputs.artifact }}

      - name: Create archive of work
        run: |
          set +e
          tar -czpf work.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Store work
        uses: actions/upload-artifact@v4
        with:
          name: work-stage2-ubuntu-latest
          path: work.tar.gz
          retention-days: 1
