on:
  push:
      branches:
          - main
  pull_request:
      branches:
          - main

jobs:
  # Build the 'taq' binary on Ubuntu
  build-binary-ubuntu:
    runs-on: ubuntu-latest
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - uses: pnpm/setup@v2
        with:
          version: 7.30.1

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Restore Deno Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ubuntu-deno-${{ hashFiles('deno.lock') }}

      - name: Install dependencies
        run: rm -rf node_modules && pnpm install

      - name: Build types
        run: pnpm run build-types

      - name: Build binary
        run: pnpm run build:binary
              
      - name: Save Deno Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: ubuntu-deno-${{ hashFiles('deno.lock') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taq-ubuntu-latest
          path: taq

      - name: Create work archive
        run: |
          set +e
          tar -czpf work-build-ubuntu.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Upload work archive
        uses: actions/upload-artifact@v4
        with:
          name: work-build-ubuntu-latest
          path: work-build-ubuntu.tar.gz
          retention-days: 1

  # Build the 'taq' binary on MacOS
  build-binary-macos:
    runs-on: macos-latest
    env:
      DENO_DIR: ./.deno
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - uses: pnpm/setup@v2
        with:
          version: 7.30.1

      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Restore Deno Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: macos-deno-${{ hashFiles('deno.lock') }}

      - name: Install dependencies
        run: rm -rf node_modules && pnpm install

      - name: Build types
        run: pnpm run build-types

      - name: Build binary
        run: pnpm run build:binary
              
      - name: Save Deno Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.DENO_DIR }}
          key: macos-deno-${{ hashFiles('deno.lock') }}

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: taq-macos-latest
          path: taq

      - name: Create work archive
        run: |
          set +e
          tar -czpf work-build-macos.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Upload work archive
        uses: actions/upload-artifact@v4
        with:
          name: work-build-macos-latest
          path: work-build-macos.tar.gz
          retention-days: 1

  # Builds all NPM packages using the work archive from Ubuntu build
  build-packages:
    needs: build-binary-ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - uses: pnpm/setup@v2
        with:
          version: 7.30.1
              
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Download work archive
        uses: actions/download-artifact@v4
        with:
          name: work-build-ubuntu-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work-build-ubuntu.tar.gz

      - name: Build packages
        run: pnpm run build:packages

      - name: Get VSIX
        id: vsix
        run: echo "artifact=$(ls taqueria-vscode-extension/*.vsix)" >> "$GITHUB_OUTPUT"

      - name: Upload VSCode Extension
        uses: actions/upload-artifact@v4
        with:
          name: taqueria.vsix
          path: ${{ steps.vsix.outputs.artifact }}

      - name: Create work archive
        run: |
          set +e
          tar -czpf work-packages.tar.gz .
          exitcode=$?
          if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
            exit $exitcode
          fi
          set -e

      - name: Upload work archive
        uses: actions/upload-artifact@v4
        with:
          name: work-packages-latest
          path: work-packages.tar.gz
          retention-days: 1

  # The rest of your workflow remains the same, with 'pnpm/setup@v2' used wherever pnpm is needed.

  # Example in 'publish-packages' job:
  publish-packages:
    needs: [build-packages, check_is_release, gather-package-info]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: ${{ fromJson(needs.gather-package-info.outputs.taggedPackages) }}
    steps:
      - name: Download work archive
        uses: actions/download-artifact@v4
        with:
          name: work-packages-latest
          path: .

      - name: Extract work archive
        run: tar -xzpf work-packages.tar.gz

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - uses: pnpm/setup@v2
        with:
          version: 7.30.1
           
      # Publish packages
      - name: Publish to npm
        run: |
          export HUSKY=0
          rm work-packages.tar.gz
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          git config --global user.email "mweichert@gmail.com"
          git config --global user.name "Michael Weichert"
          git commit -am "chore: publish packages" --allow-empty
          
          # Determine the appropriate NPM tag for publishing
          # If the "tag" property from package.json is set to "auto",
          # we rely on the "is_release" flag.
          # Otherwise, we use the specified tag in package.json which should be set to "beta", "alpha", etc.
          TAG=${{ matrix.package.tag }}
          if [ "$TAG" == "auto" ]; then
            TAG="dev"
            if [[ "${{ needs.check_is_release.outputs.is_release }}" == "yes" ]]; then
              TAG="latest"
            fi
          fi
  
          # Navigate to package directory
          cd ${{ matrix.package.location }}
    
          # Publish using pnpm with the determined tag
          pnpm publish --tag $TAG
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Ensure all other jobs that use pnpm include the 'pnpm/setup@v2' action.
